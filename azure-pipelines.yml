# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr:
  branches:
    include:
      - main

variables:
  DIFF_COVER_DISABLE: 'true'
  DIFF_COVER_CHECK_THRESHOLD: 80

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

stages:
- stage: Build
  pool:
    vmImage: 'ubuntu-20.04'
  jobs:
  - job: Build
    displayName: Build
    steps:
    - checkout: self
      displayName: 'Checkout code'
    - script: |
        sudo apt-get install -y golang-go
        sudo apt-get install -y gcovr
        sudo apt-get install python3-pip
        sudo pip3 install pytest pytest-cov
      displayName: 'Install packages'
    - script: |
        set -ex
        curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        sudo apt-add-repository https://packages.microsoft.com/ubuntu/20.04/prod
        sudo apt-get update
        sudo apt-get install -y dotnet-sdk-5.0
      displayName: 'Install .NET CORE'
    - script: |
        cd cpp
        ./build.sh
        gcovr -r $(pwd) --exclude-unreachable-branches  -x -o coverage.xml
        mkdir -p htmlcov
        gcovr -r $(pwd) --html --html-details -o htmlcov/index.html
      displayName: 'Build cpp'
    - script: |
        cd python
        python3 setup.py bdist_wheel
        pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml
      displayName: 'Build python'
    - script: |
        cd golang
        go get github.com/axw/gocov/...
        go get github.com/AlekSi/gocov-xml
        export PATH=$PATH:$(go env GOPATH)/bin
        go test -race -coverprofile=coverage.txt -covermode=atomic
        gocov convert coverage.txt | gocov-xml -source $(pwd) > coverage.xml
        mkdir -p htmlcov
        go tool cover -html=coverage.txt -o htmlcov/coverage.html
      displayName: 'Build golang'
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '$(System.DefaultWorkingDirectory)/python/junit/test-results.xml'
        testRunTitle: Python
        failTaskOnFailedTests: true
      condition: succeededOrFailed()
      displayName: 'Publish Python test results'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/python/coverage.xml' #only support one of the coverage.xml files
      displayName: 'Publish coverage'
    - task: CmdLine@2
      inputs:
        script: |
          [ -z "$DIFF_COVER_COVERAGE_FILES" ] && DIFF_COVER_COVERAGE_FILES="coverage.xml **/coverage.xml"
          converage_files="$DIFF_COVER_COVERAGE_FILES"
          converage_files=$(ls $DIFF_COVER_COVERAGE_FILES 2>/dev/null) || true
          if [ -z "$converage_files" ]; then
            echo "Skipped, the coverage files not found, the coverage file pattern is \"$DIFF_COVER_COVERAGE_FILES\""
            exit 0
          fi

          target_branch=$(System.PullRequest.TargetBranch)
          compare_branch=origin/${target_branch#refs/heads/}
          mkdir -p .coverage/htmlcov
          sudo pip install diff-cover > /dev/null
          diff-cover $converage_files --ignore-unstaged --compare-branch=$compare_branch --html-report=.coverage/htmlcov/index.html > /dev/null
          diff-cover $converage_files --ignore-unstaged --compare-branch=$compare_branch --json-report=.coverage/diff-cover.json
          ls -lt
          coverage_file=$(echo $converage_files | cut -d " " -f1)
          coverage_file=$(realpath $coverage_file)
          echo "coverage_file=$coverage_file"
          echo "##vso[task.setvariable variable=disable.coverage.autogenerate;]true"
          echo "##vso[task.setvariable variable=has.coverage.files;]true"
          echo "##vso[task.setvariable variable=code.coverage.file;]$coverage_file"
      displayName: "[Auto] Show diff coverage"
      continueOnError: true
    - task: PythonScript@0
      inputs:
        scriptSource: inline
        script: |
          import json, requests, os, datetime
          cover = {}
          checkThreshold=os.environ.get('DIFF_COVER_CHECK_THRESHOLD')
          if not checkThreshold:
            checkThreshold = '0'
          threshold = 0
          try:
            threshold = float(checkThreshold)
          except:
            print('Failed to parse the DIFF_COVER_CHECK_THRESHOLD={0} to float'.format(checkThreshold))
            exit(0)
          with open(".coverage/diff-cover.json", "r") as f:
            cover=json.load(f)
          properties = {
            'pullRequestId': $(System.PullRequest.PullRequestNumber),
            'repoUri': '$(System.PullRequest.SourceRepositoryURI)',
            'targetBranch': '$(System.PullRequest.TargetBranch)',
            'sourceCommitId': '$(system.pullRequest.sourceCommitId)',
            'sourceVersion': '$(Build.SourceVersion)',
            'jobName': '$(Agent.JobName)',
            'jobId': '$(System.JobId)',
            'definitionName': '$(Build.DefinitionName)',
            'stageName': '$(System.StageName)',
            'jobAttempt': '$(System.JobAttempt)',
            'timestamp': datetime.datetime.now().isoformat(),
            'cover.threshold': threshold,
            'cover.num_lines': cover.get("total_num_lines"),
            'cover.num_violations': cover.get("total_num_violations"),
            'cover.percent_covered': cover.get("total_percent_covered"),
          }

          data = [
              {
                'op': 'add',
                'path': '/codediff.{0}'.format('$(Agent.JobName)'),
                'value': json.dumps(properties)
              }
            ]

          with open(".coverage/codecoverageProperties.json", "w") as f:
              f.write(json.dumps(data))
      displayName: '[Auto] Update Build coverage'
      condition: eq(variables['has.coverage.files'], 'true')
      continueOnError: true
    - task: UpdateBuildProperties@1
      inputs:
        inputFile: '.coverage/codecoverageProperties.json'
      displayName: '[Auto] Update build coverage properties'
      condition: eq(variables['has.coverage.files'], 'true')
      continueOnError: true
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(code.coverage.file)'
        reportDirectory: '$(System.DefaultWorkingDirectory)/.coverage/htmlcov'
      displayName: '[Auto] Publish coverage'
      condition: eq(variables['has.coverage.files'], 'true')
      continueOnError: true
